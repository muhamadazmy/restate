// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

import "restate/common.proto";

package restate.network;

//
// # Wire Protocol Of Streaming Connections
// -------------------------------------
//
message Header {
  /// A unique monotonically increasing identifier of this message/request per
  /// producer. The uniqueness domain is the generational node id. This is
  /// always set for all messages (whether it's a request or a response)
  uint64 msg_id = 1;
  /// The msg_id at which we are responding to. Unset if this not to be
  /// considered a response. Note: If this is set, it's the responsibility of
  /// the message producer to ensure that the response is sent to the original
  /// producer (generational node id).
  // Using raw value to be as compact as possible.
  optional uint64 in_response_to = 2;
  optional uint32 my_nodes_config_version = 3;
  optional uint32 my_logs_version = 4;
  optional uint32 my_schema_version = 5;
  optional uint32 my_partition_table_version = 6;
  optional SpanContext span_context = 7;
}

message SpanContext { map<string, string> fields = 1; }

// First message sent to an ingress after starting the connection. The message
// must be sent before any other message.
message Hello {
  restate.common.ProtocolVersion min_protocol_version = 1;
  restate.common.ProtocolVersion max_protocol_version = 2;
  string cluster_name = 3;
  // generational node id of sender (who am I)
  // this is optional for future-proofing with anonymous clients using this
  // protocol
  optional restate.common.GenerationalNodeId my_node_id = 4;
}

message Welcome {
  restate.common.ProtocolVersion protocol_version = 2;
  // generational node id of sender
  restate.common.GenerationalNodeId my_node_id = 3;
}

// Bidirectional Communication
message Message {
  enum Signal {
    Signal_UNKNOWN = 0;
    // Node is shutting down
    SHUTDOWN = 1;
    // Connection will be dropped
    DRAIN_CONNECTION = 2;
    CODEC_ERROR = 3;
    // no more requests will be sent over this stream
    REQUEST_STREAM_DRAINED = 4;
    // no more responses will be sent over this stream
    RESPONSE_STREAM_DRAINED = 5;
  }
  message ConnectionControl {
    Signal signal = 1;
    string message = 2;
  }

  message BinaryMessage {
    restate.common.TargetName target = 1;
    bytes payload = 2;
  }

  Header header = 1;
  oneof body {
    ConnectionControl connection_control = 2;
    // Sent as first message
    Hello hello = 3;
    // Sent as first response
    Welcome welcome = 4;
    // keep this as last, always
    BinaryMessage encoded = 1000;
  }
}
